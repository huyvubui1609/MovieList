<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="import java.util.Properties&#10;&#10;plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.hilt)&#10;    id(&quot;kotlin-kapt&quot;)&#10;}&#10;&#10;// Read local.properties for TMDB bearer token&#10;val localProperties = Properties()&#10;val localPropertiesFile = rootProject.file(&quot;local.properties&quot;)&#10;if (localPropertiesFile.exists()) {&#10;    localProperties.load(localPropertiesFile.inputStream())&#10;}&#10;val tmdbBearer = localProperties.getProperty(&quot;TMDB_BEARER&quot;) ?: &quot;&quot;&#10;&#10;android {&#10;    namespace = &quot;com.example.movielist&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.movielist&quot;&#10;        minSdk = 28&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;com.example.movielist.HiltTestRunner&quot;&#10;&#10;        buildConfigField(&quot;String&quot;, &quot;TMDB_BEARER&quot;, &quot;\&quot;${tmdbBearer}\&quot;&quot;)&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core Android&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(libs.androidx.appcompat)&#10;&#10;    // Compose BOM&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    implementation(libs.hilt.navigation.compose)&#10;    kapt(libs.hilt.compiler)&#10;&#10;    // Network&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.converter.moshi)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging)&#10;    implementation(libs.moshi.kotlin)&#10;    kapt(libs.moshi.kotlin.codegen)&#10;&#10;    // Room&#10;    implementation(libs.room.runtime)&#10;    implementation(libs.room.ktx)&#10;    kapt(libs.room.compiler)&#10;&#10;    // Image loading&#10;    implementation(libs.coil.compose)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    testImplementation(libs.kotlinx.coroutines.test)&#10;    testImplementation(libs.turbine)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    androidTestImplementation(libs.hilt.android.testing)&#10;    kaptAndroidTest(libs.hilt.compiler)&#10;&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}&#10;" />
              <option name="updatedContent" value="import java.util.Properties&#10;&#10;plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.hilt)&#10;    id(&quot;kotlin-kapt&quot;)&#10;}&#10;&#10;// Read local.properties for TMDB bearer token&#10;val localProperties = Properties()&#10;val localPropertiesFile = rootProject.file(&quot;local.properties&quot;)&#10;if (localPropertiesFile.exists()) {&#10;    localProperties.load(localPropertiesFile.inputStream())&#10;}&#10;val tmdbBearer = localProperties.getProperty(&quot;TMDB_BEARER&quot;) ?: &quot;&quot;&#10;&#10;android {&#10;    namespace = &quot;com.example.movielist&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.movielist&quot;&#10;        minSdk = 28&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;com.example.movielist.HiltTestRunner&quot;&#10;&#10;        buildConfigField(&quot;String&quot;, &quot;TMDB_BEARER&quot;, &quot;\&quot;${tmdbBearer}\&quot;&quot;)&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;    // Core Android&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(libs.androidx.appcompat)&#10;&#10;    // Compose BOM&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.navigation.compose)&#10;&#10;    // ViewModel&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    implementation(libs.hilt.navigation.compose)&#10;    kapt(libs.hilt.compiler)&#10;&#10;    // Network&#10;    implementation(libs.retrofit)&#10;    implementation(libs.retrofit.converter.moshi)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.okhttp.logging)&#10;    implementation(libs.moshi.kotlin)&#10;    kapt(libs.moshi.kotlin.codegen)&#10;&#10;    // Room&#10;    implementation(libs.room.runtime)&#10;    implementation(libs.room.ktx)&#10;    kapt(libs.room.compiler)&#10;&#10;    // Image loading&#10;    implementation(libs.coil.compose)&#10;&#10;    // Testing&#10;    testImplementation(libs.junit)&#10;    testImplementation(libs.kotlinx.coroutines.test)&#10;    testImplementation(libs.turbine)&#10;    testImplementation(&quot;io.mockk:mockk:1.13.8&quot;)&#10;    testImplementation(&quot;io.mockk:mockk-android:1.13.8&quot;)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    androidTestImplementation(libs.hilt.android.testing)&#10;    kaptAndroidTest(libs.hilt.compiler)&#10;&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/movielist/HiltTestRunner.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/movielist/HiltTestRunner.kt" />
              <option name="updatedContent" value="package com.example.movielist&#10;&#10;import android.app.Application&#10;import android.content.Context&#10;import androidx.test.runner.AndroidJUnitRunner&#10;import dagger.hilt.android.testing.HiltTestApplication&#10;&#10;class HiltTestRunner : AndroidJUnitRunner() {&#10;&#10;    override fun newApplication(cl: ClassLoader?, name: String?, context: Context?): Application {&#10;        return super.newApplication(cl, HiltTestApplication::class.java.name, context)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/movielist/MovieListUiTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/movielist/MovieListUiTest.kt" />
              <option name="originalContent" value="package com.example.movielist&#10;&#10;import androidx.compose.ui.test.assertIsDisplayed&#10;import androidx.compose.ui.test.junit4.createAndroidComposeRule&#10;import androidx.compose.ui.test.onNodeWithContentDescription&#10;import androidx.compose.ui.test.onNodeWithText&#10;import androidx.compose.ui.test.performClick&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import com.example.movielist.data.repository.MovieRepositoryImpl&#10;import com.example.movielist.domain.model.Movie&#10;import com.example.movielist.domain.model.MovieDetail&#10;import com.example.movielist.domain.repository.MovieRepository&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import dagger.hilt.android.testing.UninstallModules&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;import javax.inject.Inject&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;@UninstallModules(com.example.movielist.di.AppModule::class)&#10;class MovieListUiTest {&#10;&#10;    @get:Rule(order = 0)&#10;    val hiltRule = HiltAndroidRule(this)&#10;&#10;    @get:Rule(order = 1)&#10;    val composeTestRule = createAndroidComposeRule&lt;MainActivity&gt;()&#10;&#10;    @Inject&#10;    lateinit var repository: MovieRepository&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun movieList_loads_and_navigates_to_detail() {&#10;        // Wait for trending movies to load&#10;        composeTestRule.onNodeWithText(&quot;Trending movies&quot;).assertIsDisplayed()&#10;&#10;        // Check if any movie item is displayed (using generic content)&#10;        composeTestRule.waitUntil(timeoutMillis = 10000) {&#10;            try {&#10;                composeTestRule.onNodeWithText(&quot;★&quot;).assertExists()&#10;                true&#10;            } catch (e: AssertionError) {&#10;                false&#10;            }&#10;        }&#10;&#10;        // Click on the first movie item that appears&#10;        composeTestRule.onNodeWithText(&quot;★&quot;).performClick()&#10;&#10;        // Verify navigation to detail screen&#10;        composeTestRule.onNodeWithText(&quot;Movie Details&quot;).assertIsDisplayed()&#10;&#10;        // Verify back navigation works&#10;        composeTestRule.onNodeWithContentDescription(&quot;Back&quot;).performClick()&#10;        composeTestRule.onNodeWithText(&quot;Movies&quot;).assertIsDisplayed()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.movielist&#10;&#10;import androidx.compose.ui.test.assertIsDisplayed&#10;import androidx.compose.ui.test.junit4.createAndroidComposeRule&#10;import androidx.compose.ui.test.onNodeWithContentDescription&#10;import androidx.compose.ui.test.onNodeWithText&#10;import androidx.compose.ui.test.performClick&#10;import androidx.test.ext.junit.runners.AndroidJUnit4&#10;import dagger.hilt.android.testing.HiltAndroidRule&#10;import dagger.hilt.android.testing.HiltAndroidTest&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.runner.RunWith&#10;&#10;@HiltAndroidTest&#10;@RunWith(AndroidJUnit4::class)&#10;class MovieListUiTest {&#10;&#10;    @get:Rule(order = 0)&#10;    val hiltRule = HiltAndroidRule(this)&#10;&#10;    @get:Rule(order = 1)&#10;    val composeTestRule = createAndroidComposeRule&lt;MainActivity&gt;()&#10;&#10;    @Before&#10;    fun setup() {&#10;        hiltRule.inject()&#10;    }&#10;&#10;    @Test&#10;    fun movieList_loads_and_displays_trending_movies() {&#10;        // Wait for trending movies to load&#10;        composeTestRule.onNodeWithText(&quot;Trending movies&quot;).assertIsDisplayed()&#10;&#10;        // Check that fake test movies are displayed&#10;        composeTestRule.onNodeWithText(&quot;Test Movie 1&quot;).assertIsDisplayed()&#10;        composeTestRule.onNodeWithText(&quot;Test Movie 2&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun movieList_navigates_to_detail_and_back() {&#10;        // Wait for movies to load&#10;        composeTestRule.onNodeWithText(&quot;Test Movie 1&quot;).assertIsDisplayed()&#10;&#10;        // Click on the first test movie&#10;        composeTestRule.onNodeWithText(&quot;Test Movie 1&quot;).performClick()&#10;&#10;        // Verify navigation to detail screen&#10;        composeTestRule.onNodeWithText(&quot;Movie Details&quot;).assertIsDisplayed()&#10;&#10;        // Verify movie title is shown in detail&#10;        composeTestRule.onNodeWithText(&quot;Test Movie 1&quot;).assertIsDisplayed()&#10;&#10;        // Verify back navigation works&#10;        composeTestRule.onNodeWithContentDescription(&quot;Back&quot;).performClick()&#10;        composeTestRule.onNodeWithText(&quot;Movies&quot;).assertIsDisplayed()&#10;    }&#10;&#10;    @Test&#10;    fun search_functionality_works() {&#10;        // Wait for initial load&#10;        composeTestRule.onNodeWithText(&quot;Test Movie 1&quot;).assertIsDisplayed()&#10;&#10;        // Find and interact with search field&#10;        composeTestRule.onNodeWithText(&quot;Search movies...&quot;).performClick()&#10;&#10;        // Note: For text input testing, you'd need to use performTextInput&#10;        // but this requires more complex setup with compose testing&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/androidTest/java/com/example/movielist/di/TestAppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/androidTest/java/com/example/movielist/di/TestAppModule.kt" />
              <option name="updatedContent" value="package com.example.movielist.di&#10;&#10;import com.example.movielist.data.repository.MovieRepositoryImpl&#10;import com.example.movielist.domain.model.Movie&#10;import com.example.movielist.domain.model.MovieDetail&#10;import com.example.movielist.domain.repository.MovieRepository&#10;import dagger.Binds&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.components.SingletonComponent&#10;import dagger.hilt.testing.TestInstallIn&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@TestInstallIn(&#10;    components = [SingletonComponent::class],&#10;    replaces = [AppModule::class]&#10;)&#10;abstract class TestAppModule {&#10;&#10;    @Binds&#10;    abstract fun bindMovieRepository(impl: FakeMovieRepository): MovieRepository&#10;&#10;    companion object {&#10;        @Provides&#10;        @Singleton&#10;        fun provideFakeMovieRepository(): FakeMovieRepository = FakeMovieRepository()&#10;    }&#10;}&#10;&#10;class FakeMovieRepository : MovieRepository {&#10;    &#10;    private val fakeMovies = listOf(&#10;        Movie(&#10;            id = 1,&#10;            title = &quot;Test Movie 1&quot;,&#10;            releaseDate = &quot;2023-01-01&quot;,&#10;            posterPath = &quot;/test1.jpg&quot;,&#10;            backdropPath = &quot;/test1_backdrop.jpg&quot;,&#10;            voteAverage = 8.5,&#10;            overview = &quot;This is a test movie overview&quot;&#10;        ),&#10;        Movie(&#10;            id = 2,&#10;            title = &quot;Test Movie 2&quot;, &#10;            releaseDate = &quot;2023-02-01&quot;,&#10;            posterPath = &quot;/test2.jpg&quot;,&#10;            backdropPath = &quot;/test2_backdrop.jpg&quot;,&#10;            voteAverage = 7.8,&#10;            overview = &quot;Another test movie overview&quot;&#10;        )&#10;    )&#10;    &#10;    private val fakeMovieDetail = MovieDetail(&#10;        id = 1,&#10;        title = &quot;Test Movie 1&quot;,&#10;        overview = &quot;This is a detailed test movie overview&quot;,&#10;        releaseDate = &quot;2023-01-01&quot;,&#10;        runtime = 120,&#10;        homepage = &quot;https://example.com&quot;,&#10;        posterPath = &quot;/test1.jpg&quot;,&#10;        backdropPath = &quot;/test1_backdrop.jpg&quot;,&#10;        voteAverage = 8.5&#10;    )&#10;&#10;    override suspend fun getTrendingMovies(page: Int): List&lt;Movie&gt; {&#10;        return fakeMovies&#10;    }&#10;&#10;    override suspend fun searchMovies(query: String, page: Int): List&lt;Movie&gt; {&#10;        return fakeMovies.filter { it.title.contains(query, ignoreCase = true) }&#10;    }&#10;&#10;    override suspend fun getMovieDetail(id: Int): MovieDetail {&#10;        return fakeMovieDetail.copy(id = id)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.MovieList&quot; /&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.MovieListApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.MovieList&quot;&gt;&#10;        &#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:theme=&quot;@style/Theme.MovieList&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/local/AppDatabase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/local/AppDatabase.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.movielist.data.local&#13;&#10;&#13;&#10;import androidx.room.Database&#13;&#10;import androidx.room.Room&#13;&#10;import androidx.room.RoomDatabase&#13;&#10;import com.example.movielist.data.local.entities.MovieDetailEntity&#13;&#10;import com.example.movielist.data.local.entities.SearchCacheEntity&#13;&#10;import com.example.movielist.data.local.entities.TrendingCacheEntity&#13;&#10;import android.content.Context&#13;&#10;&#13;&#10;@Database(&#13;&#10;    entities = [TrendingCacheEntity::class, MovieDetailEntity::class, SearchCacheEntity::class],&#13;&#10;    version = 2,&#13;&#10;    exportSchema = false&#13;&#10;)&#13;&#10;abstract class AppDatabase : RoomDatabase() {&#13;&#10;    abstract fun movieDao(): MovieDao&#13;&#10;&#13;&#10;    companion object {&#13;&#10;        const val DATABASE_NAME = &quot;movie_database&quot;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/local/MovieDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/local/MovieDao.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.movielist.data.local&#13;&#10;&#13;&#10;import androidx.room.Dao&#13;&#10;import androidx.room.Insert&#13;&#10;import androidx.room.OnConflictStrategy&#13;&#10;import androidx.room.Query&#13;&#10;import com.example.movielist.data.local.entities.MovieDetailEntity&#13;&#10;import com.example.movielist.data.local.entities.SearchCacheEntity&#13;&#10;import com.example.movielist.data.local.entities.TrendingCacheEntity&#13;&#10;&#13;&#10;@Dao&#13;&#10;interface MovieDao {&#13;&#10;    @Query(&quot;SELECT * FROM trending_cache WHERE page = :page&quot;)&#13;&#10;    suspend fun getTrendingCache(page: Int): TrendingCacheEntity?&#13;&#10;&#13;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#13;&#10;    suspend fun insertTrendingCache(cache: TrendingCacheEntity)&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM movie_details WHERE id = :id&quot;)&#13;&#10;    suspend fun getMovieDetail(id: Int): MovieDetailEntity?&#13;&#10;&#13;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#13;&#10;    suspend fun insertMovieDetail(detail: MovieDetailEntity)&#13;&#10;&#13;&#10;    @Query(&quot;SELECT * FROM search_cache WHERE query = :query&quot;)&#13;&#10;    suspend fun getSearchCache(query: String): SearchCacheEntity?&#13;&#10;&#13;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#13;&#10;    suspend fun insertSearchCache(cache: SearchCacheEntity)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/local/entities/MovieDetailEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/local/entities/MovieDetailEntity.kt" />
              <option name="updatedContent" value="package com.example.movielist.data.local.entities&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;movie_details&quot;)&#10;data class MovieDetailEntity(&#10;    @PrimaryKey val id: Int,&#10;    val json: String,&#10;    val lastFetched: Long&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/local/entities/SearchCacheEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/local/entities/SearchCacheEntity.kt" />
              <option name="updatedContent" value="package com.example.movielist.data.local.entities&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;search_cache&quot;)&#10;data class SearchCacheEntity(&#10;    @PrimaryKey val searchKey: String, // combination of query + page&#10;    val query: String,&#10;    val page: Int,&#10;    val moviesJson: String,&#10;    val lastFetched: Long&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/local/entities/TrendingCacheEntity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/local/entities/TrendingCacheEntity.kt" />
              <option name="updatedContent" value="package com.example.movielist.data.local.entities&#10;&#10;import androidx.room.Entity&#10;import androidx.room.PrimaryKey&#10;&#10;@Entity(tableName = &quot;trending_cache&quot;)&#10;data class TrendingCacheEntity(&#10;    @PrimaryKey val page: Int = 1,&#10;    val moviesJson: String,&#10;    val lastFetched: Long&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/mapper/DtoMapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/mapper/DtoMapper.kt" />
              <option name="updatedContent" value="package com.example.movielist.data.mapper&#10;&#10;import com.example.movielist.data.network.dto.TmdbMovieDto&#10;import com.example.movielist.data.network.dto.TmdbMovieDetailResponse&#10;import com.example.movielist.domain.model.Movie&#10;import com.example.movielist.domain.model.MovieDetail&#10;import javax.inject.Inject&#10;&#10;class DtoMapper @Inject constructor() {&#10;    &#10;    fun toDomain(dto: TmdbMovieDto): Movie {&#10;        return Movie(&#10;            id = dto.id,&#10;            title = dto.title,&#10;            releaseDate = dto.releaseDate,&#10;            posterPath = dto.posterPath,&#10;            backdropPath = dto.backdropPath,&#10;            voteAverage = dto.voteAverage&#10;        )&#10;    }&#10;    &#10;    fun toDomainDetail(dto: TmdbMovieDetailResponse): MovieDetail {&#10;        return MovieDetail(&#10;            id = dto.id,&#10;            title = dto.title,&#10;            overview = dto.overview,&#10;            releaseDate = dto.releaseDate,&#10;            runtime = dto.runtime,&#10;            homepage = dto.homepage,&#10;            posterPath = dto.posterPath,&#10;            backdropPath = dto.backdropPath,&#10;            voteAverage = dto.voteAverage&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/mapper/JsonMapper.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/mapper/JsonMapper.kt" />
              <option name="updatedContent" value="package com.example.movielist.data.mapper&#10;&#10;import com.example.movielist.data.network.dto.TmdbMovieDto&#10;import com.example.movielist.data.network.dto.TmdbMovieDetailResponse&#10;import com.example.movielist.domain.model.Movie&#10;import com.squareup.moshi.JsonAdapter&#10;import com.squareup.moshi.Moshi&#10;import com.squareup.moshi.Types&#10;import javax.inject.Inject&#10;&#10;class JsonMapper @Inject constructor(&#10;    private val moshi: Moshi,&#10;    private val dtoMapper: DtoMapper&#10;) {&#10;    private val movieDtoListAdapter: JsonAdapter&lt;List&lt;TmdbMovieDto&gt;&gt; = &#10;        moshi.adapter(Types.newParameterizedType(List::class.java, TmdbMovieDto::class.java))&#10;    &#10;    private val movieDetailAdapter: JsonAdapter&lt;TmdbMovieDetailResponse&gt; = &#10;        moshi.adapter(TmdbMovieDetailResponse::class.java)&#10;    &#10;    fun toJson(movieDtos: List&lt;TmdbMovieDto&gt;): String {&#10;        return movieDtoListAdapter.toJson(movieDtos)&#10;    }&#10;    &#10;    fun fromMoviesJson(json: String): List&lt;Movie&gt; {&#10;        val dtos = movieDtoListAdapter.fromJson(json) ?: emptyList()&#10;        return dtos.map { dtoMapper.toDomain(it) }&#10;    }&#10;    &#10;    fun toJsonDetail(movieDetailDto: TmdbMovieDetailResponse): String {&#10;        return movieDetailAdapter.toJson(movieDetailDto)&#10;    }&#10;    &#10;    fun fromMovieDetailJson(json: String): com.example.movielist.domain.model.MovieDetail {&#10;        val dto = movieDetailAdapter.fromJson(json) &#10;            ?: throw IllegalArgumentException(&quot;Invalid movie detail JSON&quot;)&#10;        return dtoMapper.toDomainDetail(dto)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/network/NetworkModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/network/NetworkModule.kt" />
              <option name="updatedContent" value="package com.example.movielist.data.network&#10;&#10;import com.example.movielist.BuildConfig&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.components.SingletonComponent&#10;import okhttp3.Interceptor&#10;import okhttp3.OkHttpClient&#10;import okhttp3.logging.HttpLoggingInterceptor&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.moshi.MoshiConverterFactory&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object NetworkModule {&#10;    @Provides&#10;    fun provideAuthInterceptor(): Interceptor = Interceptor { chain -&gt;&#10;        val request = chain.request().newBuilder()&#10;            .addHeader(&quot;Authorization&quot;, &quot;Bearer ${BuildConfig.TMDB_BEARER}&quot;)&#10;            .build()&#10;        chain.proceed(request)&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideOkHttp(authInterceptor: Interceptor): OkHttpClient {&#10;        val logging = HttpLoggingInterceptor().apply { &#10;            level = HttpLoggingInterceptor.Level.BASIC &#10;        }&#10;        return OkHttpClient.Builder()&#10;            .addInterceptor(authInterceptor)&#10;            .addInterceptor(logging)&#10;            .build()&#10;    }&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideRetrofit(client: OkHttpClient): Retrofit =&#10;        Retrofit.Builder()&#10;            .baseUrl(&quot;https://api.themoviedb.org/3/&quot;)&#10;            .client(client)&#10;            .addConverterFactory(MoshiConverterFactory.create())&#10;            .build()&#10;&#10;    @Provides&#10;    @Singleton&#10;    fun provideTmdbService(retrofit: Retrofit): TmdbService = retrofit.create(TmdbService::class.java)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/network/dto/placeholder.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/network/dto/placeholder.kt" />
              <option name="updatedContent" value="// This file is intentionally empty as DTOs are defined in TmdbDtos.kt&#10;// This ensures the dto package exists for proper organization" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/repository/MovieRepositoryImpl.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/data/repository/MovieRepositoryImpl.kt" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package com.example.movielist.data.repository&#10;&#10;import com.example.movielist.data.local.MovieDao&#10;import com.example.movielist.data.local.entities.MovieDetailEntity&#10;import com.example.movielist.data.local.entities.SearchCacheEntity&#10;import com.example.movielist.data.local.entities.TrendingCacheEntity&#10;import com.example.movielist.data.mapper.DtoMapper&#10;import com.example.movielist.data.mapper.JsonMapper&#10;import com.example.movielist.data.network.TmdbService&#10;import com.example.movielist.domain.model.Movie&#10;import com.example.movielist.domain.model.MovieDetail&#10;import com.example.movielist.domain.repository.MovieRepository&#10;import com.example.movielist.util.CacheValidator&#10;import com.example.movielist.util.Logger&#10;import javax.inject.Inject&#10;&#10;class MovieRepositoryImpl @Inject constructor(&#10;    private val tmdbService: TmdbService,&#10;    private val dao: MovieDao,&#10;    private val dtoMapper: DtoMapper,&#10;    private val jsonMapper: JsonMapper,&#10;    private val logger: Logger&#10;) : MovieRepository {&#10;&#10;    override suspend fun getTrendingMovies(page: Int): List&lt;Movie&gt; {&#10;        val cached = dao.getTrendingCache(page)&#10;        if (cached != null &amp;&amp; CacheValidator.isValid(cached.lastFetched)) {&#10;            logger.d(&quot;Repo&quot;, &quot;Returning cached trending page=$page&quot;)&#10;            return jsonMapper.fromMoviesJson(cached.moviesJson)&#10;        }&#10;&#10;        try {&#10;            val response = tmdbService.getTrending(page)&#10;            val movies = response.results.map { dtoMapper.toDomain(it) }&#10;            dao.insertTrendingCache(&#10;                TrendingCacheEntity(&#10;                    page = page,&#10;                    moviesJson = jsonMapper.toJson(response.results),&#10;                    lastFetched = System.currentTimeMillis()&#10;                )&#10;            )&#10;            logger.d(&quot;Repo&quot;, &quot;Fetched trending from network and cached page=$page&quot;)&#10;            return movies&#10;        } catch (e: Exception) {&#10;            if (cached != null) {&#10;                logger.d(&quot;Repo&quot;, &quot;Network failed, returning stale cache page=$page&quot;)&#10;                return jsonMapper.fromMoviesJson(cached.moviesJson)&#10;            }&#10;            throw e&#10;        }&#10;    }&#10;&#10;    override suspend fun searchMovies(query: String, page: Int): List&lt;Movie&gt; {&#10;        val searchKey = &quot;${query}_$page&quot;&#10;        val cached = dao.getSearchCache(searchKey)&#10;        if (cached != null &amp;&amp; CacheValidator.isValid(cached.lastFetched)) {&#10;            logger.d(&quot;Repo&quot;, &quot;Returning cached search results for query='$query' page=$page&quot;)&#10;            return jsonMapper.fromMoviesJson(cached.moviesJson)&#10;        }&#10;&#10;        try {&#10;            val response = tmdbService.searchMovies(query, page)&#10;            val movies = response.results.map { dtoMapper.toDomain(it) }&#10;            dao.insertSearchCache(&#10;                SearchCacheEntity(&#10;                    searchKey = searchKey,&#10;                    query = query,&#10;                    page = page,&#10;                    moviesJson = jsonMapper.toJson(response.results),&#10;                    lastFetched = System.currentTimeMillis()&#10;                )&#10;            )&#10;            logger.d(&quot;Repo&quot;, &quot;Fetched search results from network and cached query='$query' page=$page&quot;)&#10;            return movies&#10;        } catch (e: Exception) {&#10;            if (cached != null) {&#10;                logger.d(&quot;Repo&quot;, &quot;Network failed, returning stale search cache query='$query' page=$page&quot;)&#10;                return jsonMapper.fromMoviesJson(cached.moviesJson)&#10;            }&#10;            throw e&#10;        }&#10;    }&#10;&#10;    override suspend fun getMovieDetail(id: Int): MovieDetail {&#10;        val cached = dao.getMovieDetail(id)&#10;        if (cached != null) {&#10;            logger.d(&quot;Repo&quot;, &quot;Returning cached detail id=$id&quot;)&#10;            return jsonMapper.fromMovieDetailJson(cached.json)&#10;        }&#10;        val response = tmdbService.getMovieDetails(id)&#10;        val domain = dtoMapper.toDomainDetail(response)&#10;        dao.insertMovieDetail(&#10;            MovieDetailEntity(&#10;                id = id,&#10;                json = jsonMapper.toJsonDetail(response),&#10;                lastFetched = System.currentTimeMillis()&#10;            )&#10;        )&#10;        logger.d(&quot;Repo&quot;, &quot;Fetched detail from network and cached id=$id&quot;)&#10;        return domain&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/di/AppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/di/AppModule.kt" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package com.example.movielist.di&#13;&#10;&#13;&#10;import android.content.Context&#13;&#10;import android.util.Log&#13;&#10;import androidx.room.Room&#13;&#10;import com.example.movielist.data.local.AppDatabase&#13;&#10;import com.example.movielist.data.local.MovieDao&#13;&#10;import com.example.movielist.data.repository.MovieRepositoryImpl&#13;&#10;import com.example.movielist.domain.repository.MovieRepository&#13;&#10;import com.example.movielist.util.Logger&#13;&#10;import com.squareup.moshi.Moshi&#13;&#10;import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory&#13;&#10;import dagger.Binds&#13;&#10;import dagger.Module&#13;&#10;import dagger.Provides&#13;&#10;import dagger.hilt.InstallIn&#13;&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#13;&#10;import dagger.hilt.components.SingletonComponent&#13;&#10;import javax.inject.Singleton&#13;&#10;&#13;&#10;@Module&#13;&#10;@InstallIn(SingletonComponent::class)&#13;&#10;abstract class AppModule {&#13;&#10;&#13;&#10;    @Binds&#13;&#10;    abstract fun bindMovieRepository(impl: MovieRepositoryImpl): MovieRepository&#13;&#10;&#13;&#10;    companion object {&#13;&#10;        @Provides&#13;&#10;        @Singleton&#13;&#10;        fun provideMoshi(): Moshi = Moshi.Builder()&#13;&#10;            .add(KotlinJsonAdapterFactory())&#13;&#10;            .build()&#13;&#10;&#13;&#10;        @Provides&#13;&#10;        @Singleton&#13;&#10;        fun provideAppDatabase(@ApplicationContext context: Context): AppDatabase =&#13;&#10;            Room.databaseBuilder(&#13;&#10;                context,&#13;&#10;                AppDatabase::class.java,&#13;&#10;                AppDatabase.DATABASE_NAME&#13;&#10;            )&#13;&#10;            .fallbackToDestructiveMigration()&#13;&#10;            .build()&#13;&#10;&#13;&#10;        @Provides&#13;&#10;        fun provideMovieDao(database: AppDatabase): MovieDao = database.movieDao()&#13;&#10;&#13;&#10;        @Provides&#13;&#10;        @Singleton&#13;&#10;        fun provideLogger(): Logger = object : Logger {&#13;&#10;            override fun d(tag: String, message: String) {&#13;&#10;                Log.d(tag, message)&#13;&#10;                println(&quot;[$tag] $message&quot;) // Also print to stdout for KMM compatibility&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/domain/model/Movie.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/domain/model/Movie.kt" />
              <option name="updatedContent" value="package com.example.movielist.domain.model&#10;&#10;// Keep domain classes platform-agnostic to move into KMM shared module easily.&#10;data class Movie(&#10;    val id: Int,&#10;    val title: String,&#10;    val releaseDate: String?,&#10;    val posterPath: String?,&#10;    val backdropPath: String?,&#10;    val voteAverage: Double&#10;) {&#10;    fun year(): String? = releaseDate?.takeIf { it.length &gt;= 4 }?.substring(0, 4)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/domain/model/MovieDetail.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/domain/model/MovieDetail.kt" />
              <option name="updatedContent" value="package com.example.movielist.domain.model&#10;&#10;// Keep domain classes platform-agnostic to move into KMM shared module easily.&#10;data class MovieDetail(&#10;    val id: Int,&#10;    val title: String,&#10;    val overview: String?,&#10;    val releaseDate: String?,&#10;    val runtime: Int?,&#10;    val homepage: String?,&#10;    val posterPath: String?,&#10;    val backdropPath: String?,&#10;    val voteAverage: Double&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/domain/usecase/GetTrendingMoviesUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/domain/usecase/GetTrendingMoviesUseCase.kt" />
              <option name="updatedContent" value="package com.example.movielist.domain.usecase&#10;&#10;import com.example.movielist.domain.model.Movie&#10;import com.example.movielist.domain.repository.MovieRepository&#10;import javax.inject.Inject&#10;&#10;// Keep use case classes platform-agnostic to move into KMM shared module easily.&#10;class GetTrendingMoviesUseCase @Inject constructor(&#10;    private val repository: MovieRepository&#10;) {&#10;    suspend operator fun invoke(page: Int = 1): List&lt;Movie&gt; {&#10;        return repository.getTrendingMovies(page)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/domain/usecase/SearchMoviesUseCase.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/domain/usecase/SearchMoviesUseCase.kt" />
              <option name="updatedContent" value="package com.example.movielist.domain.usecase&#10;&#10;import com.example.movielist.domain.model.Movie&#10;import com.example.movielist.domain.repository.MovieRepository&#10;import javax.inject.Inject&#10;&#10;// Keep use case classes platform-agnostic to move into KMM shared module easily.&#10;class SearchMoviesUseCase @Inject constructor(&#10;    private val repository: MovieRepository&#10;) {&#10;    suspend operator fun invoke(query: String, page: Int = 1): List&lt;Movie&gt; {&#10;        return repository.searchMovies(query, page)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/common/UiState.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/common/UiState.kt" />
              <option name="updatedContent" value="package com.example.movielist.presentation.common&#10;&#10;sealed class UiState&lt;out T&gt; {&#10;    object Loading : UiState&lt;Nothing&gt;()&#10;    data class Success&lt;T&gt;(val data: T) : UiState&lt;T&gt;()&#10;    data class Error(val message: String) : UiState&lt;Nothing&gt;()&#10;    object Empty : UiState&lt;Nothing&gt;()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/moviedetail/MovieDetailViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/moviedetail/MovieDetailViewModel.kt" />
              <option name="originalContent" value="&#10;&#10;&#10;" />
              <option name="updatedContent" value="package com.example.movielist.presentation.moviedetail&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.movielist.domain.model.MovieDetail&#10;import com.example.movielist.domain.usecase.GetMovieDetailUseCase&#10;import com.example.movielist.presentation.common.UiState&#10;import com.example.movielist.util.Logger&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class MovieDetailViewModel @Inject constructor(&#10;    private val getMovieDetailUseCase: GetMovieDetailUseCase,&#10;    private val logger: Logger&#10;) : ViewModel() {&#10;&#10;    private val _detailState = MutableStateFlow&lt;UiState&lt;MovieDetail&gt;&gt;(UiState.Loading)&#10;    val detailState: StateFlow&lt;UiState&lt;MovieDetail&gt;&gt; = _detailState.asStateFlow()&#10;&#10;    private val _showOfflineIndicator = MutableStateFlow(false)&#10;    val showOfflineIndicator: StateFlow&lt;Boolean&gt; = _showOfflineIndicator.asStateFlow()&#10;&#10;    fun loadMovieDetail(id: Int) {&#10;        viewModelScope.launch {&#10;            _detailState.value = UiState.Loading&#10;            _showOfflineIndicator.value = false&#10;&#10;            try {&#10;                val movieDetail = getMovieDetailUseCase(id)&#10;                _detailState.value = UiState.Success(movieDetail)&#10;            } catch (e: Exception) {&#10;                logger.e(&quot;MovieDetailViewModel&quot;, &quot;Error loading movie detail for id=$id: ${e.message}&quot;, e)&#10;                _showOfflineIndicator.value = true&#10;                _detailState.value = UiState.Error(getNetworkErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getNetworkErrorMessage(exception: Exception): String {&#10;        return when {&#10;            exception.message?.contains(&quot;Unable to resolve host&quot;) == true ||&#10;            exception.message?.contains(&quot;No address associated with hostname&quot;) == true -&gt;&#10;                &quot;No internet connection. Showing cached details if available.&quot;&#10;            exception.message?.contains(&quot;timeout&quot;) == true -&gt;&#10;                &quot;Connection timeout. Please check your internet connection.&quot;&#10;            else -&gt; &quot;Network error occurred. ${exception.message ?: &quot;Please try again.&quot;}&quot;&#10;        }&#10;    }&#10;&#10;    fun retry(id: Int) {&#10;        loadMovieDetail(id)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/movielist/MoviesListViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/movielist/MoviesListViewModel.kt" />
              <option name="originalContent" value="package com.example.movielist.presentation.movielist&#10;&#10;import android.util.Log&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.example.movielist.domain.model.Movie&#10;import com.example.movielist.domain.usecase.GetTrendingMoviesUseCase&#10;import com.example.movielist.domain.usecase.SearchMoviesUseCase&#10;import com.example.movielist.presentation.common.UiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.ExperimentalCoroutinesApi&#10;import kotlinx.coroutines.FlowPreview&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.debounce&#10;import kotlinx.coroutines.flow.distinctUntilChanged&#10;import kotlinx.coroutines.flow.flatMapLatest&#10;import kotlinx.coroutines.flow.flowOf&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;@OptIn(FlowPreview::class, ExperimentalCoroutinesApi::class)&#10;@HiltViewModel&#10;class MoviesListViewModel @Inject constructor(&#10;    private val getTrendingMoviesUseCase: GetTrendingMoviesUseCase,&#10;    private val searchMoviesUseCase: SearchMoviesUseCase&#10;) : ViewModel() {&#10;&#10;    private val _moviesState = MutableStateFlow&lt;UiState&lt;List&lt;Movie&gt;&gt;&gt;(UiState.Loading)&#10;    val moviesState: StateFlow&lt;UiState&lt;List&lt;Movie&gt;&gt;&gt; = _moviesState.asStateFlow()&#10;&#10;    private val _searchQuery = MutableStateFlow(&quot;&quot;)&#10;    val searchQuery: StateFlow&lt;String&gt; = _searchQuery.asStateFlow()&#10;&#10;    private val _showOfflineIndicator = MutableStateFlow(false)&#10;    val showOfflineIndicator: StateFlow&lt;Boolean&gt; = _showOfflineIndicator.asStateFlow()&#10;&#10;    init {&#10;        // Debounce search queries and trigger appropriate loading&#10;        viewModelScope.launch {&#10;            _searchQuery&#10;                .debounce(300)&#10;                .distinctUntilChanged()&#10;                .flatMapLatest { query -&gt;&#10;                    if (query.isBlank()) {&#10;                        flowOf(SearchAction.LoadTrending)&#10;                    } else {&#10;                        flowOf(SearchAction.Search(query))&#10;                    }&#10;                }&#10;                .collect { action -&gt;&#10;                    when (action) {&#10;                        is SearchAction.LoadTrending -&gt; loadTrendingMovies()&#10;                        is SearchAction.Search -&gt; searchMovies(action.query)&#10;                    }&#10;                }&#10;        }&#10;&#10;        // Load trending movies initially&#10;        loadTrendingMovies()&#10;    }&#10;&#10;    fun onSearchQueryChanged(query: String) {&#10;        _searchQuery.value = query&#10;    }&#10;&#10;    private fun loadTrendingMovies() {&#10;        viewModelScope.launch {&#10;            _moviesState.value = UiState.Loading&#10;            _showOfflineIndicator.value = false&#10;&#10;            try {&#10;                val movies = getTrendingMoviesUseCase()&#10;                if (movies.isEmpty()) {&#10;                    _moviesState.value = UiState.Empty&#10;                } else {&#10;                    _moviesState.value = UiState.Success(movies)&#10;                }&#10;            } catch (e: Exception) {&#10;                _showOfflineIndicator.value = true&#10;                _moviesState.value = UiState.Error(getNetworkErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun searchMovies(query: String) {&#10;        viewModelScope.launch {&#10;            _moviesState.value = UiState.Loading&#10;            _showOfflineIndicator.value = false&#10;&#10;            try {&#10;                val movies = searchMoviesUseCase(query)&#10;                if (movies.isEmpty()) {&#10;                    _moviesState.value = UiState.Empty&#10;                } else {&#10;                    _moviesState.value = UiState.Success(movies)&#10;                }&#10;            } catch (e: Exception) {&#10;                _showOfflineIndicator.value = true&#10;                _moviesState.value = UiState.Error(getNetworkErrorMessage(e))&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getNetworkErrorMessage(exception: Exception): String {&#10;        return when {&#10;            exception.message?.contains(&quot;Unable to resolve host&quot;) == true ||&#10;            exception.message?.contains(&quot;No address associated with hostname&quot;) == true -&gt;&#10;                &quot;No internet connection. Showing cached results if available.&quot;&#10;            exception.message?.contains(&quot;timeout&quot;) == true -&gt;&#10;                &quot;Connection timeout. Please check your internet connection.&quot;&#10;            else -&gt; &quot;Network error occurred. ${exception.message ?: &quot;Please try again.&quot;}&quot;&#10;        }&#10;    }&#10;&#10;    fun retry() {&#10;        if (_searchQuery.value.isBlank()) {&#10;            loadTrendingMovies()&#10;        } else {&#10;            searchMovies(_searchQuery.value)&#10;        }&#10;    }&#10;&#10;    private sealed class SearchAction {&#10;        object LoadTrending : SearchAction()&#10;        data class Search(val query: String) : SearchAction()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.movielist.presentation.movielist&#13;&#10;&#13;&#10;import android.util.Log&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import androidx.lifecycle.viewModelScope&#13;&#10;import com.example.movielist.domain.model.Movie&#13;&#10;import com.example.movielist.domain.usecase.GetTrendingMoviesUseCase&#13;&#10;import com.example.movielist.domain.usecase.SearchMoviesUseCase&#13;&#10;import com.example.movielist.presentation.common.UiState&#13;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#13;&#10;import kotlinx.coroutines.ExperimentalCoroutinesApi&#13;&#10;import kotlinx.coroutines.FlowPreview&#13;&#10;import kotlinx.coroutines.flow.MutableStateFlow&#13;&#10;import kotlinx.coroutines.flow.StateFlow&#13;&#10;import kotlinx.coroutines.flow.asStateFlow&#13;&#10;import kotlinx.coroutines.flow.debounce&#13;&#10;import kotlinx.coroutines.flow.distinctUntilChanged&#13;&#10;import kotlinx.coroutines.flow.flatMapLatest&#13;&#10;import kotlinx.coroutines.flow.flowOf&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;import javax.inject.Inject&#13;&#10;&#13;&#10;@OptIn(FlowPreview::class, ExperimentalCoroutinesApi::class)&#13;&#10;@HiltViewModel&#13;&#10;class MoviesListViewModel @Inject constructor(&#13;&#10;    private val getTrendingMoviesUseCase: GetTrendingMoviesUseCase,&#13;&#10;    private val searchMoviesUseCase: SearchMoviesUseCase&#13;&#10;) : ViewModel() {&#13;&#10;&#13;&#10;    private val _moviesState = MutableStateFlow&lt;UiState&lt;List&lt;Movie&gt;&gt;&gt;(UiState.Loading)&#13;&#10;    val moviesState: StateFlow&lt;UiState&lt;List&lt;Movie&gt;&gt;&gt; = _moviesState.asStateFlow()&#13;&#10;&#13;&#10;    private val _searchQuery = MutableStateFlow(&quot;&quot;)&#13;&#10;    val searchQuery: StateFlow&lt;String&gt; = _searchQuery.asStateFlow()&#13;&#10;&#13;&#10;    private val _showOfflineIndicator = MutableStateFlow(false)&#13;&#10;    val showOfflineIndicator: StateFlow&lt;Boolean&gt; = _showOfflineIndicator.asStateFlow()&#13;&#10;&#13;&#10;    init {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _searchQuery&#13;&#10;                .debounce(300)&#13;&#10;                .distinctUntilChanged()&#13;&#10;                .flatMapLatest { query -&gt;&#13;&#10;                    if (query.isBlank()) {&#13;&#10;                        flowOf(SearchAction.LoadTrending)&#13;&#10;                    } else {&#13;&#10;                        flowOf(SearchAction.Search(query))&#13;&#10;                    }&#13;&#10;                }&#13;&#10;                .collect { action -&gt;&#13;&#10;                    when (action) {&#13;&#10;                        is SearchAction.LoadTrending -&gt; loadTrendingMovies()&#13;&#10;                        is SearchAction.Search -&gt; searchMovies(action.query)&#13;&#10;                    }&#13;&#10;                }&#13;&#10;        }&#13;&#10;&#13;&#10;        loadTrendingMovies()&#13;&#10;    }&#13;&#10;&#13;&#10;    fun onSearchQueryChanged(query: String) {&#13;&#10;        _searchQuery.value = query&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun loadTrendingMovies() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _moviesState.value = UiState.Loading&#13;&#10;            _showOfflineIndicator.value = false&#13;&#10;&#13;&#10;            try {&#13;&#10;                val movies = getTrendingMoviesUseCase()&#13;&#10;                if (movies.isEmpty()) {&#13;&#10;                    _moviesState.value = UiState.Empty&#13;&#10;                } else {&#13;&#10;                    _moviesState.value = UiState.Success(movies)&#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _showOfflineIndicator.value = true&#13;&#10;                _moviesState.value = UiState.Error(getNetworkErrorMessage(e))&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun searchMovies(query: String) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _moviesState.value = UiState.Loading&#13;&#10;            _showOfflineIndicator.value = false&#13;&#10;&#13;&#10;            try {&#13;&#10;                val movies = searchMoviesUseCase(query)&#13;&#10;                if (movies.isEmpty()) {&#13;&#10;                    _moviesState.value = UiState.Empty&#13;&#10;                } else {&#13;&#10;                    _moviesState.value = UiState.Success(movies)&#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _showOfflineIndicator.value = true&#13;&#10;                _moviesState.value = UiState.Error(getNetworkErrorMessage(e))&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun getNetworkErrorMessage(exception: Exception): String {&#13;&#10;        return when {&#13;&#10;            exception.message?.contains(&quot;Unable to resolve host&quot;) == true ||&#13;&#10;            exception.message?.contains(&quot;No address associated with hostname&quot;) == true -&gt;&#13;&#10;                &quot;No internet connection. Showing cached results if available.&quot;&#13;&#10;            exception.message?.contains(&quot;timeout&quot;) == true -&gt;&#13;&#10;                &quot;Connection timeout. Please check your internet connection.&quot;&#13;&#10;            else -&gt; &quot;Network error occurred. ${exception.message ?: &quot;Please try again.&quot;}&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun retry() {&#13;&#10;        if (_searchQuery.value.isBlank()) {&#13;&#10;            loadTrendingMovies()&#13;&#10;        } else {&#13;&#10;            searchMovies(_searchQuery.value)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private sealed class SearchAction {&#13;&#10;        object LoadTrending : SearchAction()&#13;&#10;        data class Search(val query: String) : SearchAction()&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/ui/MovieDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/ui/MovieDetailScreen.kt" />
              <option name="originalContent" value="package com.example.movielist.presentation.ui&#10;&#10;import android.content.Intent&#10;import android.net.Uri&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.text.selection.SelectionContainer&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import com.example.movielist.domain.model.MovieDetail&#10;import com.example.movielist.presentation.common.UiState&#10;import com.example.movielist.presentation.moviedetail.MovieDetailViewModel&#10;import kotlin.math.round&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MovieDetailScreen(&#10;    movieId: Int,&#10;    navController: NavController,&#10;    viewModel: MovieDetailViewModel = hiltViewModel()&#10;) {&#10;    val detailState by viewModel.detailState.collectAsState()&#10;    val showOfflineIndicator by viewModel.showOfflineIndicator.collectAsState()&#10;    val context = LocalContext.current&#10;&#10;    LaunchedEffect(movieId) {&#10;        viewModel.loadMovieDetail(movieId)&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Movie Details&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.navigateUp() }) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        val currentDetailState = detailState&#10;        when (currentDetailState) {&#10;            is UiState.Loading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            }&#10;            is UiState.Success -&gt; {&#10;                MovieDetailContent(&#10;                    movieDetail = currentDetailState.data,&#10;                    showOfflineIndicator = showOfflineIndicator,&#10;                    onHomepageClick = { url -&gt;&#10;                        try {&#10;                            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))&#10;                            context.startActivity(intent)&#10;                        } catch (e: Exception) {&#10;                            // Handle error silently&#10;                        }&#10;                    },&#10;                    modifier = Modifier.padding(paddingValues)&#10;                )&#10;            }&#10;            is UiState.Error -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        SelectionContainer {&#10;                            Text(&#10;                                text = currentDetailState.message,&#10;                                textAlign = TextAlign.Center,&#10;                                modifier = Modifier.padding(16.dp)&#10;                            )&#10;                        }&#10;                        Button(onClick = { viewModel.retry(movieId) }) {&#10;                            Text(&quot;Retry&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            is UiState.Empty -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Movie details not available&quot;,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.padding(16.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun MovieDetailContent(&#10;    movieDetail: MovieDetail,&#10;    showOfflineIndicator: Boolean,&#10;    onHomepageClick: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        // Offline indicator&#10;        if (showOfflineIndicator) {&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Offline - showing cached details&quot;,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;&#10;        // Movie poster&#10;        val posterUrl = movieDetail.posterPath?.let { &quot;https://image.tmdb.org/t/p/w500$it&quot; }&#10;        if (posterUrl != null) {&#10;            AsyncImage(&#10;                model = ImageRequest.Builder(LocalContext.current)&#10;                    .data(posterUrl)&#10;                    .crossfade(true)&#10;                    .build(),&#10;                contentDescription = &quot;Poster for ${movieDetail.title}&quot;,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(400.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;        }&#10;&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Title&#10;            Text(&#10;                text = movieDetail.title,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            // Runtime and Vote Average&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                movieDetail.runtime?.let { runtime -&gt;&#10;                    Text(&#10;                        text = &quot;${runtime} min&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                Text(&#10;                    text = &quot;★ ${round(movieDetail.voteAverage * 10) / 10}&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;&#10;            // Overview&#10;            movieDetail.overview?.let { overview -&gt;&#10;                if (overview.isNotBlank()) {&#10;                    Text(&#10;                        text = &quot;Overview&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = overview,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        lineHeight = MaterialTheme.typography.bodyMedium.lineHeight&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Homepage&#10;            movieDetail.homepage?.let { homepage -&gt;&#10;                if (homepage.isNotBlank() &amp;&amp; (homepage.startsWith(&quot;http://&quot;) || homepage.startsWith(&quot;https://&quot;))) {&#10;                    Text(&#10;                        text = &quot;Visit Homepage&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        textDecoration = TextDecoration.Underline,&#10;                        modifier = Modifier.clickable { onHomepageClick(homepage) }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.movielist.presentation.ui&#10;&#10;import android.content.Intent&#10;import android.net.Uri&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.text.selection.SelectionContainer&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextDecoration&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import com.example.movielist.domain.model.MovieDetail&#10;import com.example.movielist.presentation.common.UiState&#10;import com.example.movielist.presentation.moviedetail.MovieDetailViewModel&#10;import kotlin.math.round&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MovieDetailScreen(&#10;    movieId: Int,&#10;    navController: NavController,&#10;    viewModel: MovieDetailViewModel = hiltViewModel()&#10;) {&#10;    val detailState by viewModel.detailState.collectAsState()&#10;    val showOfflineIndicator by viewModel.showOfflineIndicator.collectAsState()&#10;    val context = LocalContext.current&#10;&#10;    LaunchedEffect(movieId) {&#10;        viewModel.loadMovieDetail(movieId)&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Movie Details&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.navigateUp() }) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        val currentDetailState = detailState&#10;        when (currentDetailState) {&#10;            is UiState.Loading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            }&#10;            is UiState.Success -&gt; {&#10;                MovieDetailContent(&#10;                    movieDetail = currentDetailState.data,&#10;                    showOfflineIndicator = showOfflineIndicator,&#10;                    onHomepageClick = { url -&gt;&#10;                        try {&#10;                            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))&#10;                            context.startActivity(intent)&#10;                        } catch (e: Exception) {&#10;                        }&#10;                    },&#10;                    modifier = Modifier.padding(paddingValues)&#10;                )&#10;            }&#10;            is UiState.Error -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        SelectionContainer {&#10;                            Text(&#10;                                text = currentDetailState.message,&#10;                                textAlign = TextAlign.Center,&#10;                                modifier = Modifier.padding(16.dp)&#10;                            )&#10;                        }&#10;                        Button(onClick = { viewModel.retry(movieId) }) {&#10;                            Text(&quot;Retry&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            is UiState.Empty -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Movie details not available&quot;,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.padding(16.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun MovieDetailContent(&#10;    movieDetail: MovieDetail,&#10;    showOfflineIndicator: Boolean,&#10;    onHomepageClick: (String) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxSize()&#10;            .verticalScroll(rememberScrollState())&#10;    ) {&#10;        if (showOfflineIndicator) {&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                )&#10;            ) {&#10;                Text(&#10;                    text = &quot;Offline - showing cached details&quot;,&#10;                    modifier = Modifier.padding(16.dp),&#10;                    style = MaterialTheme.typography.bodyMedium&#10;                )&#10;            }&#10;        }&#10;&#10;        val posterUrl = movieDetail.posterPath?.let { &quot;https://image.tmdb.org/t/p/w500$it&quot; }&#10;        if (posterUrl != null) {&#10;            AsyncImage(&#10;                model = ImageRequest.Builder(LocalContext.current)&#10;                    .data(posterUrl)&#10;                    .crossfade(true)&#10;                    .build(),&#10;                contentDescription = &quot;Poster for ${movieDetail.title}&quot;,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(400.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;        }&#10;&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = movieDetail.title,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                movieDetail.runtime?.let { runtime -&gt;&#10;                    Text(&#10;                        text = &quot;${runtime} min&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                Text(&#10;                    text = &quot;★ ${round(movieDetail.voteAverage * 10) / 10}&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;&#10;            movieDetail.overview?.let { overview -&gt;&#10;                if (overview.isNotBlank()) {&#10;                    Text(&#10;                        text = &quot;Overview&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;                    Text(&#10;                        text = overview,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        lineHeight = MaterialTheme.typography.bodyMedium.lineHeight&#10;                    )&#10;                }&#10;            }&#10;&#10;            movieDetail.homepage?.let { homepage -&gt;&#10;                if (homepage.isNotBlank() &amp;&amp; (homepage.startsWith(&quot;http://&quot;) || homepage.startsWith(&quot;https://&quot;))) {&#10;                    Text(&#10;                        text = &quot;Visit Homepage&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        textDecoration = TextDecoration.Underline,&#10;                        modifier = Modifier.clickable { onHomepageClick(homepage) }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/ui/MovieListItem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/ui/MovieListItem.kt" />
              <option name="updatedContent" value="package com.example.movielist.presentation.ui&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import com.example.movielist.domain.model.Movie&#10;import kotlin.math.round&#10;&#10;@Composable&#10;fun MovieListItem(&#10;    movie: Movie,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() },&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // Movie poster/backdrop image&#10;            val imageUrl = movie.posterPath?.let { &quot;https://image.tmdb.org/t/p/w342$it&quot; }&#10;                ?: movie.backdropPath?.let { &quot;https://image.tmdb.org/t/p/w342$it&quot; }&#10;            &#10;            AsyncImage(&#10;                model = ImageRequest.Builder(LocalContext.current)&#10;                    .data(imageUrl)&#10;                    .crossfade(true)&#10;                    .build(),&#10;                contentDescription = &quot;Movie poster for ${movie.title}&quot;,&#10;                modifier = Modifier&#10;                    .width(80.dp)&#10;                    .height(120.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            &#10;            // Movie details&#10;            Column(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .align(Alignment.CenterVertically),&#10;                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Text(&#10;                    text = movie.title,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold,&#10;                    maxLines = 2,&#10;                    overflow = TextOverflow.Ellipsis&#10;                )&#10;                &#10;                movie.year()?.let { year -&gt;&#10;                    Text(&#10;                        text = year,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                &#10;                Text(&#10;                    text = &quot;★ ${round(movie.voteAverage * 10) / 10}&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.primary&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/ui/MoviesListScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/presentation/ui/MoviesListScreen.kt" />
              <option name="originalContent" value="package com.example.movielist.presentation.ui&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.selection.SelectionContainer&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.navigation.NavController&#10;import com.example.movielist.domain.model.Movie&#10;import com.example.movielist.presentation.common.UiState&#10;import com.example.movielist.presentation.movielist.MoviesListViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun MoviesListScreen(&#10;    navController: NavController,&#10;    viewModel: MoviesListViewModel = hiltViewModel()&#10;) {&#10;    val moviesState by viewModel.moviesState.collectAsState()&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#10;    val showOfflineIndicator by viewModel.showOfflineIndicator.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Movies&quot;) }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            // Search bar&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = viewModel::onSearchQueryChanged,&#10;                label = { Text(&quot;Search movies...&quot;) },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;            )&#10;&#10;            // Offline indicator&#10;            if (showOfflineIndicator) {&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(horizontal = 16.dp, vertical = 8.dp),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;                    )&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Offline - showing cached results&quot;,&#10;                        modifier = Modifier.padding(16.dp),&#10;                        style = MaterialTheme.typography.bodyMedium&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Header&#10;            val headerText = if (searchQuery.isBlank()) &quot;Trending movies&quot; else &quot;Search results&quot;&#10;            Text(&#10;                text = headerText,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;&#10;            // Content&#10;            val currentMoviesState = moviesState&#10;            when (currentMoviesState) {&#10;                is UiState.Loading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator()&#10;                    }&#10;                }&#10;                is UiState.Success -&gt; {&#10;                    LazyColumn(&#10;                        contentPadding = PaddingValues(16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        items(currentMoviesState.data) { movie -&gt;&#10;                            MovieListItem(&#10;                                movie = movie,&#10;                                onClick = {&#10;                                    navController.navigate(&quot;detail/${movie.id}&quot;)&#10;                                }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                is UiState.Error -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            SelectionContainer {&#10;                                Text(&#10;                                    text = currentMoviesState.message,&#10;                                    textAlign = TextAlign.Center,&#10;                                    modifier = Modifier.padding(16.dp)&#10;                                )&#10;                            }&#10;                            Button(onClick = viewModel::retry) {&#10;                                Text(&quot;Retry&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                is UiState.Empty -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Text(&#10;                            text = if (searchQuery.isBlank())&#10;                                &quot;No trending movies found&quot;&#10;                            else&#10;                                &quot;No movies found for '$searchQuery'&quot;,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(16.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.movielist.presentation.ui&#13;&#10;&#13;&#10;import androidx.compose.foundation.layout.Arrangement&#13;&#10;import androidx.compose.foundation.layout.Box&#13;&#10;import androidx.compose.foundation.layout.Column&#13;&#10;import androidx.compose.foundation.layout.PaddingValues&#13;&#10;import androidx.compose.foundation.layout.fillMaxSize&#13;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#13;&#10;import androidx.compose.foundation.layout.padding&#13;&#10;import androidx.compose.foundation.lazy.LazyColumn&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import androidx.compose.foundation.text.selection.SelectionContainer&#13;&#10;import androidx.compose.material3.Button&#13;&#10;import androidx.compose.material3.Card&#13;&#10;import androidx.compose.material3.CardDefaults&#13;&#10;import androidx.compose.material3.CircularProgressIndicator&#13;&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.material3.OutlinedTextField&#13;&#10;import androidx.compose.material3.Scaffold&#13;&#10;import androidx.compose.material3.Text&#13;&#10;import androidx.compose.material3.TopAppBar&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.runtime.collectAsState&#13;&#10;import androidx.compose.runtime.getValue&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.text.style.TextAlign&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.hilt.navigation.compose.hiltViewModel&#13;&#10;import androidx.navigation.NavController&#13;&#10;import com.example.movielist.domain.model.Movie&#13;&#10;import com.example.movielist.presentation.common.UiState&#13;&#10;import com.example.movielist.presentation.movielist.MoviesListViewModel&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun MoviesListScreen(&#13;&#10;    navController: NavController,&#13;&#10;    viewModel: MoviesListViewModel = hiltViewModel()&#13;&#10;) {&#13;&#10;    val moviesState by viewModel.moviesState.collectAsState()&#13;&#10;    val searchQuery by viewModel.searchQuery.collectAsState()&#13;&#10;    val showOfflineIndicator by viewModel.showOfflineIndicator.collectAsState()&#13;&#10;&#13;&#10;    Scaffold(&#13;&#10;        topBar = {&#13;&#10;            TopAppBar(&#13;&#10;                title = { Text(&quot;Movies&quot;) }&#13;&#10;            )&#13;&#10;        }&#13;&#10;    ) { paddingValues -&gt;&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxSize()&#13;&#10;                .padding(paddingValues)&#13;&#10;        ) {&#13;&#10;            OutlinedTextField(&#13;&#10;                value = searchQuery,&#13;&#10;                onValueChange = viewModel::onSearchQueryChanged,&#13;&#10;                label = { Text(&quot;Search movies...&quot;) },&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxWidth()&#13;&#10;                    .padding(16.dp)&#13;&#10;            )&#13;&#10;&#13;&#10;            if (showOfflineIndicator) {&#13;&#10;                Card(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .padding(horizontal = 16.dp, vertical = 8.dp),&#13;&#10;                    colors = CardDefaults.cardColors(&#13;&#10;                        containerColor = MaterialTheme.colorScheme.surfaceVariant&#13;&#10;                    )&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = &quot;Offline - showing cached results&quot;,&#13;&#10;                        modifier = Modifier.padding(16.dp),&#13;&#10;                        style = MaterialTheme.typography.bodyMedium&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            val headerText = if (searchQuery.isBlank()) &quot;Trending movies&quot; else &quot;Search results&quot;&#13;&#10;            Text(&#13;&#10;                text = headerText,&#13;&#10;                style = MaterialTheme.typography.headlineSmall,&#13;&#10;                modifier = Modifier.padding(16.dp)&#13;&#10;            )&#13;&#10;&#13;&#10;            val currentMoviesState = moviesState&#13;&#10;            when (currentMoviesState) {&#13;&#10;                is UiState.Loading -&gt; {&#13;&#10;                    Box(&#13;&#10;                        modifier = Modifier.fillMaxSize(),&#13;&#10;                        contentAlignment = Alignment.Center&#13;&#10;                    ) {&#13;&#10;                        CircularProgressIndicator()&#13;&#10;                    }&#13;&#10;                }&#13;&#10;                is UiState.Success -&gt; {&#13;&#10;                    LazyColumn(&#13;&#10;                        contentPadding = PaddingValues(16.dp),&#13;&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#13;&#10;                    ) {&#13;&#10;                        items(currentMoviesState.data) { movie -&gt;&#13;&#10;                            MovieListItem(&#13;&#10;                                movie = movie,&#13;&#10;                                onClick = {&#13;&#10;                                    navController.navigate(&quot;detail/${movie.id}&quot;)&#13;&#10;                                }&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;                is UiState.Error -&gt; {&#13;&#10;                    Box(&#13;&#10;                        modifier = Modifier.fillMaxSize(),&#13;&#10;                        contentAlignment = Alignment.Center&#13;&#10;                    ) {&#13;&#10;                        Column(&#13;&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                        ) {&#13;&#10;                            SelectionContainer {&#13;&#10;                                Text(&#13;&#10;                                    text = currentMoviesState.message,&#13;&#10;                                    textAlign = TextAlign.Center,&#13;&#10;                                    modifier = Modifier.padding(16.dp)&#13;&#10;                                )&#13;&#10;                            }&#13;&#10;                            Button(onClick = viewModel::retry) {&#13;&#10;                                Text(&quot;Retry&quot;)&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;                is UiState.Empty -&gt; {&#13;&#10;                    Box(&#13;&#10;                        modifier = Modifier.fillMaxSize(),&#13;&#10;                        contentAlignment = Alignment.Center&#13;&#10;                    ) {&#13;&#10;                        Text(&#13;&#10;                            text = if (searchQuery.isBlank())&#13;&#10;                                &quot;No trending movies found&quot;&#13;&#10;                            else&#13;&#10;                                &quot;No movies found for '$searchQuery'&quot;,&#13;&#10;                            textAlign = TextAlign.Center,&#13;&#10;                            modifier = Modifier.padding(16.dp)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/ui/theme/Theme.kt" />
              <option name="updatedContent" value="package com.example.movielist.ui.theme&#10;&#10;import android.app.Activity&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.SideEffect&#10;import androidx.compose.ui.graphics.toArgb&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.platform.LocalView&#10;import androidx.core.view.WindowCompat&#10;&#10;private val DarkColorScheme = darkColorScheme()&#10;private val LightColorScheme = lightColorScheme()&#10;&#10;@Composable&#10;fun MovieListTheme(&#10;    darkTheme: Boolean = isSystemInDarkTheme(),&#10;    dynamicColor: Boolean = true,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    val colorScheme = when {&#10;        dynamicColor &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.S -&gt; {&#10;            val context = LocalContext.current&#10;            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)&#10;        }&#10;&#10;        darkTheme -&gt; DarkColorScheme&#10;        else -&gt; LightColorScheme&#10;    }&#10;    val view = LocalView.current&#10;    if (!view.isInEditMode) {&#10;        SideEffect {&#10;            val window = (view.context as Activity).window&#10;            window.statusBarColor = colorScheme.primary.toArgb()&#10;            WindowCompat.getInsetsController(window, view).isAppearanceLightStatusBars = darkTheme&#10;        }&#10;    }&#10;&#10;    MaterialTheme(&#10;        colorScheme = colorScheme,&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/util/CacheValidator.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/util/CacheValidator.kt" />
              <option name="updatedContent" value="package com.example.movielist.util&#10;&#10;object CacheValidator {&#10;    private const val DEFAULT_MAX_AGE_MS = 24 * 60 * 60 * 1000L&#10;&#10;    fun isValid(lastFetched: Long, maxAgeMillis: Long = DEFAULT_MAX_AGE_MS): Boolean {&#10;        return System.currentTimeMillis() - lastFetched &lt; maxAgeMillis&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/movielist/util/Logger.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/movielist/util/Logger.kt" />
              <option name="updatedContent" value="package com.example.movielist.util&#10;&#10;// Keep Logger interface platform-agnostic to move into KMM shared module easily.&#10;interface Logger {&#10;    fun d(tag: String, message: String)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/themes.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/themes.xml" />
              <option name="originalContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Theme.MovieList&quot; parent=&quot;Theme.Material3.Light&quot;&gt;&#10;        &lt;!-- Customize your light theme here. --&gt;&#10;        &lt;!-- &lt;item name=&quot;colorPrimary&quot;&gt;@color/my_light_primary&lt;/item&gt; --&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;    &lt;!-- Base application theme. --&gt;&#10;    &lt;style name=&quot;Theme.MovieList&quot; parent=&quot;android:Theme.Material.Light.NoActionBar&quot;&gt;&#10;        &lt;!-- Customize your light theme here. --&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/test/java/com/example/movielist/data/repository/MovieRepositoryImplTest.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/test/java/com/example/movielist/data/repository/MovieRepositoryImplTest.kt" />
              <option name="originalContent" value="package com.example.movielist.data.repository&#10;&#10;import com.example.movielist.data.local.MovieDao&#10;import com.example.movielist.data.local.entities.MovieDetailEntity&#10;import com.example.movielist.data.local.entities.SearchCacheEntity&#10;import com.example.movielist.data.local.entities.TrendingCacheEntity&#10;import com.example.movielist.data.mapper.DtoMapper&#10;import com.example.movielist.data.mapper.JsonMapper&#10;import com.example.movielist.data.network.TmdbService&#10;import com.example.movielist.data.network.dto.TmdbMovieDetailResponse&#10;import com.example.movielist.data.network.dto.TmdbMovieDto&#10;import com.example.movielist.data.network.dto.TmdbMoviesResponse&#10;import com.example.movielist.domain.model.Movie&#10;import com.example.movielist.domain.model.MovieDetail&#10;import com.example.movielist.util.CacheValidator&#10;import com.example.movielist.util.Logger&#10;import io.mockk.coEvery&#10;import io.mockk.coVerify&#10;import io.mockk.every&#10;import io.mockk.impl.annotations.MockK&#10;import io.mockk.junit4.MockKRule&#10;import io.mockk.mockk&#10;import io.mockk.mockkObject&#10;import io.mockk.slot&#10;import io.mockk.unmockkAll&#10;import io.mockk.verify&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Rule&#10;import org.junit.Test&#10;import org.junit.Assert.*&#10;import java.io.IOException&#10;&#10;class MovieRepositoryImplTest {&#10;&#10;    @get:Rule&#10;    val mockKRule = MockKRule(this)&#10;&#10;    @MockK&#10;    private lateinit var tmdbService: TmdbService&#10;&#10;    @MockK&#10;    private lateinit var dao: MovieDao&#10;&#10;    @MockK&#10;    private lateinit var dtoMapper: DtoMapper&#10;&#10;    @MockK&#10;    private lateinit var jsonMapper: JsonMapper&#10;&#10;    @MockK&#10;    private lateinit var logger: Logger&#10;&#10;    private lateinit var repository: MovieRepositoryImpl&#10;&#10;    // Test data&#10;    private val testMovieDto = TmdbMovieDto(&#10;        id = 1,&#10;        title = &quot;Test Movie&quot;,&#10;        releaseDate = &quot;2023-01-01&quot;,&#10;        posterPath = &quot;/test.jpg&quot;,&#10;        backdropPath = &quot;/test_backdrop.jpg&quot;,&#10;        voteAverage = 8.5,&#10;        overview = &quot;Test overview&quot;&#10;    )&#10;&#10;    private val testMovie = Movie(&#10;        id = 1,&#10;        title = &quot;Test Movie&quot;,&#10;        releaseDate = &quot;2023-01-01&quot;,&#10;        posterPath = &quot;/test.jpg&quot;,&#10;        backdropPath = &quot;/test_backdrop.jpg&quot;,&#10;        voteAverage = 8.5,&#10;        overview = &quot;Test overview&quot;&#10;    )&#10;&#10;    private val testMovieDetailDto = TmdbMovieDetailResponse(&#10;        id = 1,&#10;        title = &quot;Test Movie&quot;,&#10;        overview = &quot;Test overview&quot;,&#10;        releaseDate = &quot;2023-01-01&quot;,&#10;        runtime = 120,&#10;        homepage = &quot;https://example.com&quot;,&#10;        posterPath = &quot;/test.jpg&quot;,&#10;        backdropPath = &quot;/test_backdrop.jpg&quot;,&#10;        voteAverage = 8.5&#10;    )&#10;&#10;    private val testMovieDetail = MovieDetail(&#10;        id = 1,&#10;        title = &quot;Test Movie&quot;,&#10;        overview = &quot;Test overview&quot;,&#10;        releaseDate = &quot;2023-01-01&quot;,&#10;        runtime = 120,&#10;        homepage = &quot;https://example.com&quot;,&#10;        posterPath = &quot;/test.jpg&quot;,&#10;        backdropPath = &quot;/test_backdrop.jpg&quot;,&#10;        voteAverage = 8.5&#10;    )&#10;&#10;    private val testTrendingResponse = TmdbMoviesResponse(&#10;        page = 1,&#10;        results = listOf(testMovieDto),&#10;        totalPages = 1,&#10;        totalResults = 1&#10;    )&#10;&#10;    @Before&#10;    fun setup() {&#10;        repository = MovieRepositoryImpl(tmdbService, dao, dtoMapper, jsonMapper, logger)&#10;        mockkObject(CacheValidator)&#10;&#10;        // Default mock behaviors&#10;        every { logger.d(any(), any()) } returns Unit&#10;        every { dtoMapper.toDomain(testMovieDto) } returns testMovie&#10;        every { dtoMapper.toDomainDetail(testMovieDetailDto) } returns testMovieDetail&#10;        every { jsonMapper.toJson(any&lt;List&lt;TmdbMovieDto&gt;&gt;()) } returns &quot;mock_json&quot;&#10;        every { jsonMapper.toJsonDetail(testMovieDetailDto) } returns &quot;mock_detail_json&quot;&#10;        every { jsonMapper.fromMoviesJson(&quot;mock_json&quot;) } returns listOf(testMovie)&#10;        every { jsonMapper.fromMovieDetailJson(&quot;mock_detail_json&quot;) } returns testMovieDetail&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        unmockkAll()&#10;    }&#10;&#10;    // getTrendingMovies Tests&#10;    @Test&#10;    fun `getTrendingMovies returns cached data when cache is valid`() = runTest {&#10;        // Given&#10;        val page = 1&#10;        val cachedEntity = TrendingCacheEntity(&#10;            page = page,&#10;            moviesJson = &quot;mock_json&quot;,&#10;            lastFetched = System.currentTimeMillis()&#10;        )&#10;        coEvery { dao.getTrendingCache(page) } returns cachedEntity&#10;        every { CacheValidator.isValid(any()) } returns true&#10;&#10;        // When&#10;        val result = repository.getTrendingMovies(page)&#10;&#10;        // Then&#10;        assertEquals(listOf(testMovie), result)&#10;        verify { logger.d(&quot;Repo&quot;, &quot;Returning cached trending page=$page&quot;) }&#10;        verify { jsonMapper.fromMoviesJson(&quot;mock_json&quot;) }&#10;        coVerify(exactly = 0) { tmdbService.getTrending(any()) }&#10;    }&#10;&#10;    @Test&#10;    fun `getTrendingMovies fetches from network when cache is invalid`() = runTest {&#10;        // Given&#10;        val page = 1&#10;        val cachedEntity = TrendingCacheEntity(&#10;            page = page,&#10;            moviesJson = &quot;mock_json&quot;,&#10;            lastFetched = System.currentTimeMillis() - 100000&#10;        )&#10;        coEvery { dao.getTrendingCache(page) } returns cachedEntity&#10;        every { CacheValidator.isValid(any()) } returns false&#10;        coEvery { tmdbService.getTrending(page) } returns testTrendingResponse&#10;        coEvery { dao.insertTrendingCache(any()) } returns Unit&#10;&#10;        // When&#10;        val result = repository.getTrendingMovies(page)&#10;&#10;        // Then&#10;        assertEquals(listOf(testMovie), result)&#10;        verify { logger.d(&quot;Repo&quot;, &quot;Fetched trending from network and cached page=$page&quot;) }&#10;        coVerify { tmdbService.getTrending(page) }&#10;        coVerify { dao.insertTrendingCache(any()) }&#10;    }&#10;&#10;    @Test&#10;    fun `getTrendingMovies fetches from network when no cache exists`() = runTest {&#10;        // Given&#10;        val page = 1&#10;        coEvery { dao.getTrendingCache(page) } returns null&#10;        coEvery { tmdbService.getTrending(page) } returns testTrendingResponse&#10;        coEvery { dao.insertTrendingCache(any()) } returns Unit&#10;&#10;        // When&#10;        val result = repository.getTrendingMovies(page)&#10;&#10;        // Then&#10;        assertEquals(listOf(testMovie), result)&#10;        verify { logger.d(&quot;Repo&quot;, &quot;Fetched trending from network and cached page=$page&quot;) }&#10;        coVerify { tmdbService.getTrending(page) }&#10;        coVerify { dao.insertTrendingCache(any()) }&#10;    }&#10;&#10;    @Test&#10;    fun `getTrendingMovies returns stale cache when network fails`() = runTest {&#10;        // Given&#10;        val page = 1&#10;        val cachedEntity = TrendingCacheEntity(&#10;            page = page,&#10;            moviesJson = &quot;mock_json&quot;,&#10;            lastFetched = System.currentTimeMillis() - 100000&#10;        )&#10;        coEvery { dao.getTrendingCache(page) } returns cachedEntity&#10;        every { CacheValidator.isValid(any()) } returns false&#10;        coEvery { tmdbService.getTrending(page) } throws IOException(&quot;Network error&quot;)&#10;&#10;        // When&#10;        val result = repository.getTrendingMovies(page)&#10;&#10;        // Then&#10;        assertEquals(listOf(testMovie), result)&#10;        verify { logger.d(&quot;Repo&quot;, &quot;Network failed, returning stale cache page=$page&quot;) }&#10;        coVerify { tmdbService.getTrending(page) }&#10;    }&#10;&#10;    @Test&#10;    fun `getTrendingMovies throws exception when network fails and no cache exists`() = runTest {&#10;        // Given&#10;        val page = 1&#10;        coEvery { dao.getTrendingCache(page) } returns null&#10;        coEvery { tmdbService.getTrending(page) } throws IOException(&quot;Network error&quot;)&#10;&#10;        // When &amp; Then&#10;        try {&#10;            repository.getTrendingMovies(page)&#10;            fail(&quot;Expected exception to be thrown&quot;)&#10;        } catch (e: IOException) {&#10;            assertEquals(&quot;Network error&quot;, e.message)&#10;        }&#10;        coVerify { tmdbService.getTrending(page) }&#10;    }&#10;&#10;    // searchMovies Tests&#10;    @Test&#10;    fun `searchMovies returns cached data when cache is valid`() = runTest {&#10;        // Given&#10;        val query = &quot;batman&quot;&#10;        val page = 1&#10;        val searchKey = &quot;${query}_$page&quot;&#10;        val cachedEntity = SearchCacheEntity(&#10;            searchKey = searchKey,&#10;            query = query,&#10;            page = page,&#10;            moviesJson = &quot;mock_json&quot;,&#10;            lastFetched = System.currentTimeMillis()&#10;        )&#10;        coEvery { dao.getSearchCache(searchKey) } returns cachedEntity&#10;        every { CacheValidator.isValid(any()) } returns true&#10;&#10;        // When&#10;        val result = repository.searchMovies(query, page)&#10;&#10;        // Then&#10;        assertEquals(listOf(testMovie), result)&#10;        verify { logger.d(&quot;Repo&quot;, &quot;Returning cached search results for query='$query' page=$page&quot;) }&#10;        verify { jsonMapper.fromMoviesJson(&quot;mock_json&quot;) }&#10;        coVerify(exactly = 0) { tmdbService.searchMovies(any(), any()) }&#10;    }&#10;&#10;    @Test&#10;    fun `searchMovies fetches from network when cache is invalid`() = runTest {&#10;        // Given&#10;        val query = &quot;batman&quot;&#10;        val page = 1&#10;        val searchKey = &quot;${query}_$page&quot;&#10;        coEvery { dao.getSearchCache(searchKey) } returns null&#10;        coEvery { tmdbService.searchMovies(query, page) } returns testTrendingResponse&#10;        coEvery { dao.insertSearchCache(any()) } returns Unit&#10;&#10;        // When&#10;        val result = repository.searchMovies(query, page)&#10;&#10;        // Then&#10;        assertEquals(listOf(testMovie), result)&#10;        verify { logger.d(&quot;Repo&quot;, &quot;Fetched search results from network and cached query='$query' page=$page&quot;) }&#10;        coVerify { tmdbService.searchMovies(query, page) }&#10;        coVerify { dao.insertSearchCache(any()) }&#10;    }&#10;&#10;    @Test&#10;    fun `searchMovies returns stale cache when network fails`() = runTest {&#10;        // Given&#10;        val query = &quot;batman&quot;&#10;        val page = 1&#10;        val searchKey = &quot;${query}_$page&quot;&#10;        val cachedEntity = SearchCacheEntity(&#10;            searchKey = searchKey,&#10;            query = query,&#10;            page = page,&#10;            moviesJson = &quot;mock_json&quot;,&#10;            lastFetched = System.currentTimeMillis() - 100000&#10;        )&#10;        coEvery { dao.getSearchCache(searchKey) } returns cachedEntity&#10;        every { CacheValidator.isValid(any()) } returns false&#10;        coEvery { tmdbService.searchMovies(query, page) } throws IOException(&quot;Network error&quot;)&#10;&#10;        // When&#10;        val result = repository.searchMovies(query, page)&#10;&#10;        // Then&#10;        assertEquals(listOf(testMovie), result)&#10;        verify { logger.d(&quot;Repo&quot;, &quot;Network failed, returning stale search cache query='$query' page=$page&quot;) }&#10;        coVerify { tmdbService.searchMovies(query, page) }&#10;    }&#10;&#10;    @Test&#10;    fun `searchMovies throws exception when network fails and no cache exists`() = runTest {&#10;        // Given&#10;        val query = &quot;batman&quot;&#10;        val page = 1&#10;        val searchKey = &quot;${query}_$page&quot;&#10;        coEvery { dao.getSearchCache(searchKey) } returns null&#10;        coEvery { tmdbService.searchMovies(query, page) } throws IOException(&quot;Network error&quot;)&#10;&#10;        // When &amp; Then&#10;        try {&#10;            repository.searchMovies(query, page)&#10;            fail(&quot;Expected exception to be thrown&quot;)&#10;        } catch (e: IOException) {&#10;            assertEquals(&quot;Network error&quot;, e.message)&#10;        }&#10;        coVerify { tmdbService.searchMovies(query, page) }&#10;    }&#10;&#10;    // getMovieDetail Tests&#10;    @Test&#10;    fun `getMovieDetail returns cached data when available`() = runTest {&#10;        // Given&#10;        val movieId = 1&#10;        val cachedEntity = MovieDetailEntity(&#10;            id = movieId,&#10;            json = &quot;mock_detail_json&quot;,&#10;            lastFetched = System.currentTimeMillis()&#10;        )&#10;        coEvery { dao.getMovieDetail(movieId) } returns cachedEntity&#10;&#10;        // When&#10;        val result = repository.getMovieDetail(movieId)&#10;&#10;        // Then&#10;        assertEquals(testMovieDetail, result)&#10;        verify { logger.d(&quot;Repo&quot;, &quot;Returning cached detail id=$movieId&quot;) }&#10;        verify { jsonMapper.fromMovieDetailJson(&quot;mock_detail_json&quot;) }&#10;        coVerify(exactly = 0) { tmdbService.getMovieDetails(any()) }&#10;    }&#10;&#10;    @Test&#10;    fun `getMovieDetail fetches from network when no cache exists`() = runTest {&#10;        // Given&#10;        val movieId = 1&#10;        coEvery { dao.getMovieDetail(movieId) } returns null&#10;        coEvery { tmdbService.getMovieDetails(movieId) } returns testMovieDetailDto&#10;        coEvery { dao.insertMovieDetail(any()) } returns Unit&#10;&#10;        // When&#10;        val result = repository.getMovieDetail(movieId)&#10;&#10;        // Then&#10;        assertEquals(testMovieDetail, result)&#10;        verify { logger.d(&quot;Repo&quot;, &quot;Fetched detail from network and cached id=$movieId&quot;) }&#10;        coVerify { tmdbService.getMovieDetails(movieId) }&#10;        coVerify { dao.insertMovieDetail(any()) }&#10;    }&#10;&#10;    @Test&#10;    fun `getMovieDetail throws exception when network fails and no cache exists`() = runTest {&#10;        // Given&#10;        val movieId = 1&#10;        coEvery { dao.getMovieDetail(movieId) } returns null&#10;        coEvery { tmdbService.getMovieDetails(movieId) } throws IOException(&quot;Network error&quot;)&#10;&#10;        // When &amp; Then&#10;        try {&#10;            repository.getMovieDetail(movieId)&#10;            fail(&quot;Expected exception to be thrown&quot;)&#10;        } catch (e: IOException) {&#10;            assertEquals(&quot;Network error&quot;, e.message)&#10;        }&#10;        coVerify { tmdbService.getMovieDetails(movieId) }&#10;    }&#10;&#10;    @Test&#10;    fun `getTrendingMovies inserts correct cache entity`() = runTest {&#10;        // Given&#10;        val page = 1&#10;        coEvery { dao.getTrendingCache(page) } returns null&#10;        coEvery { tmdbService.getTrending(page) } returns testTrendingResponse&#10;        val cacheSlot = slot&lt;TrendingCacheEntity&gt;()&#10;        coEvery { dao.insertTrendingCache(capture(cacheSlot)) } returns Unit&#10;&#10;        // When&#10;        repository.getTrendingMovies(page)&#10;&#10;        // Then&#10;        val capturedCache = cacheSlot.captured&#10;        assertEquals(page, capturedCache.page)&#10;        assertEquals(&quot;mock_json&quot;, capturedCache.moviesJson)&#10;        assertTrue(capturedCache.lastFetched &gt; 0)&#10;    }&#10;&#10;    @Test&#10;    fun `searchMovies inserts correct cache entity`() = runTest {&#10;        // Given&#10;        val query = &quot;batman&quot;&#10;        val page = 1&#10;        val searchKey = &quot;${query}_$page&quot;&#10;        coEvery { dao.getSearchCache(searchKey) } returns null&#10;        coEvery { tmdbService.searchMovies(query, page) } returns testTrendingResponse&#10;        val cacheSlot = slot&lt;SearchCacheEntity&gt;()&#10;        coEvery { dao.insertSearchCache(capture(cacheSlot)) } returns Unit&#10;&#10;        // When&#10;        repository.searchMovies(query, page)&#10;&#10;        // Then&#10;        val capturedCache = cacheSlot.captured&#10;        assertEquals(searchKey, capturedCache.searchKey)&#10;        assertEquals(query, capturedCache.query)&#10;        assertEquals(page, capturedCache.page)&#10;        assertEquals(&quot;mock_json&quot;, capturedCache.moviesJson)&#10;        assertTrue(capturedCache.lastFetched &gt; 0)&#10;    }&#10;&#10;    @Test&#10;    fun `getMovieDetail inserts correct cache entity`() = runTest {&#10;        // Given&#10;        val movieId = 1&#10;        coEvery { dao.getMovieDetail(movieId) } returns null&#10;        coEvery { tmdbService.getMovieDetails(movieId) } returns testMovieDetailDto&#10;        val cacheSlot = slot&lt;MovieDetailEntity&gt;()&#10;        coEvery { dao.insertMovieDetail(capture(cacheSlot)) } returns Unit&#10;&#10;        // When&#10;        repository.getMovieDetail(movieId)&#10;&#10;        // Then&#10;        val capturedCache = cacheSlot.captured&#10;        assertEquals(movieId, capturedCache.id)&#10;        assertEquals(&quot;mock_detail_json&quot;, capturedCache.json)&#10;        assertTrue(capturedCache.lastFetched &gt; 0)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.movielist.data.repository&#10;&#10;import com.example.movielist.data.local.MovieDao&#10;import com.example.movielist.data.local.entities.MovieDetailEntity&#10;import com.example.movielist.data.local.entities.SearchCacheEntity&#10;import com.example.movielist.data.local.entities.TrendingCacheEntity&#10;import com.example.movielist.data.mapper.DtoMapper&#10;import com.example.movielist.data.mapper.JsonMapper&#10;import com.example.movielist.data.network.TmdbService&#10;import com.example.movielist.data.network.dto.TmdbMovieDetailResponse&#10;import com.example.movielist.data.network.dto.TmdbMovieDto&#10;import com.example.movielist.data.network.dto.TmdbMoviesResponse&#10;import com.example.movielist.domain.model.Movie&#10;import com.example.movielist.domain.model.MovieDetail&#10;import com.example.movielist.util.Logger&#10;import io.mockk.coEvery&#10;import io.mockk.coVerify&#10;import io.mockk.every&#10;import io.mockk.mockk&#10;import io.mockk.mockkObject&#10;import io.mockk.slot&#10;import io.mockk.unmockkAll&#10;import io.mockk.verify&#10;import kotlinx.coroutines.test.runTest&#10;import org.junit.After&#10;import org.junit.Before&#10;import org.junit.Test&#10;import org.junit.Assert.*&#10;import java.io.IOException&#10;&#10;class MovieRepositoryImplTest {&#10;&#10;    private lateinit var tmdbService: TmdbService&#10;    private lateinit var dao: MovieDao&#10;    private lateinit var dtoMapper: DtoMapper&#10;    private lateinit var jsonMapper: JsonMapper&#10;    private lateinit var logger: Logger&#10;    private lateinit var repository: MovieRepositoryImpl&#10;&#10;    // Test data&#10;    private val testMovieDto = TmdbMovieDto(&#10;        id = 1,&#10;        title = &quot;Test Movie&quot;,&#10;        releaseDate = &quot;2023-01-01&quot;,&#10;        posterPath = &quot;/test.jpg&quot;,&#10;        backdropPath = &quot;/test_backdrop.jpg&quot;,&#10;        voteAverage = 8.5,&#10;        overview = &quot;Test overview&quot;&#10;    )&#10;&#10;    private val testMovie = Movie(&#10;        id = 1,&#10;        title = &quot;Test Movie&quot;,&#10;        releaseDate = &quot;2023-01-01&quot;,&#10;        posterPath = &quot;/test.jpg&quot;,&#10;        backdropPath = &quot;/test_backdrop.jpg&quot;,&#10;        voteAverage = 8.5,&#10;        overview = &quot;Test overview&quot;&#10;    )&#10;&#10;    private val testMovieDetailDto = TmdbMovieDetailResponse(&#10;        id = 1,&#10;        title = &quot;Test Movie&quot;,&#10;        overview = &quot;Test overview&quot;,&#10;        releaseDate = &quot;2023-01-01&quot;,&#10;        runtime = 120,&#10;        homepage = &quot;https://example.com&quot;,&#10;        posterPath = &quot;/test.jpg&quot;,&#10;        backdropPath = &quot;/test_backdrop.jpg&quot;,&#10;        voteAverage = 8.5&#10;    )&#10;&#10;    private val testMovieDetail = MovieDetail(&#10;        id = 1,&#10;        title = &quot;Test Movie&quot;,&#10;        overview = &quot;Test overview&quot;,&#10;        releaseDate = &quot;2023-01-01&quot;,&#10;        runtime = 120,&#10;        homepage = &quot;https://example.com&quot;,&#10;        posterPath = &quot;/test.jpg&quot;,&#10;        backdropPath = &quot;/test_backdrop.jpg&quot;,&#10;        voteAverage = 8.5&#10;    )&#10;&#10;    private val testTrendingResponse = TmdbMoviesResponse(&#10;        page = 1,&#10;        results = listOf(testMovieDto),&#10;        totalPages = 1,&#10;        totalResults = 1&#10;    )&#10;&#10;    @Before&#10;    fun setup() {&#10;        // Create mocks&#10;        tmdbService = mockk()&#10;        dao = mockk()&#10;        dtoMapper = mockk()&#10;        jsonMapper = mockk()&#10;        logger = mockk(relaxed = true)&#10;        &#10;        repository = MovieRepositoryImpl(tmdbService, dao, dtoMapper, jsonMapper, logger)&#10;        &#10;        // Mock static CacheValidator&#10;        mockkObject(com.example.movielist.util.CacheValidator)&#10;        &#10;        // Default mock behaviors&#10;        every { dtoMapper.toDomain(testMovieDto) } returns testMovie&#10;        every { dtoMapper.toDomainDetail(testMovieDetailDto) } returns testMovieDetail&#10;        every { jsonMapper.toJson(any&lt;List&lt;TmdbMovieDto&gt;&gt;()) } returns &quot;mock_json&quot;&#10;        every { jsonMapper.toJsonDetail(testMovieDetailDto) } returns &quot;mock_detail_json&quot;&#10;        every { jsonMapper.fromMoviesJson(&quot;mock_json&quot;) } returns listOf(testMovie)&#10;        every { jsonMapper.fromMovieDetailJson(&quot;mock_detail_json&quot;) } returns testMovieDetail&#10;    }&#10;&#10;    @After&#10;    fun tearDown() {&#10;        unmockkAll()&#10;    }&#10;&#10;    // getTrendingMovies Tests&#10;    @Test&#10;    fun `getTrendingMovies returns cached data when cache is valid`() = runTest {&#10;        // Given&#10;        val page = 1&#10;        val cachedEntity = TrendingCacheEntity(&#10;            page = page,&#10;            moviesJson = &quot;mock_json&quot;,&#10;            lastFetched = System.currentTimeMillis()&#10;        )&#10;        coEvery { dao.getTrendingCache(page) } returns cachedEntity&#10;        every { com.example.movielist.util.CacheValidator.isValid(any()) } returns true&#10;&#10;        // When&#10;        val result = repository.getTrendingMovies(page)&#10;&#10;        // Then&#10;        assertEquals(listOf(testMovie), result)&#10;        verify { jsonMapper.fromMoviesJson(&quot;mock_json&quot;) }&#10;        coVerify(exactly = 0) { tmdbService.getTrending(any()) }&#10;    }&#10;&#10;    @Test&#10;    fun `getTrendingMovies fetches from network when no cache exists`() = runTest {&#10;        // Given&#10;        val page = 1&#10;        coEvery { dao.getTrendingCache(page) } returns null&#10;        coEvery { tmdbService.getTrending(page) } returns testTrendingResponse&#10;        coEvery { dao.insertTrendingCache(any()) } returns Unit&#10;&#10;        // When&#10;        val result = repository.getTrendingMovies(page)&#10;&#10;        // Then&#10;        assertEquals(listOf(testMovie), result)&#10;        coVerify { tmdbService.getTrending(page) }&#10;        coVerify { dao.insertTrendingCache(any()) }&#10;    }&#10;&#10;    @Test&#10;    fun `getTrendingMovies returns stale cache when network fails`() = runTest {&#10;        // Given&#10;        val page = 1&#10;        val cachedEntity = TrendingCacheEntity(&#10;            page = page,&#10;            moviesJson = &quot;mock_json&quot;,&#10;            lastFetched = System.currentTimeMillis() - 100000&#10;        )&#10;        coEvery { dao.getTrendingCache(page) } returns cachedEntity&#10;        every { com.example.movielist.util.CacheValidator.isValid(any()) } returns false&#10;        coEvery { tmdbService.getTrending(page) } throws IOException(&quot;Network error&quot;)&#10;&#10;        // When&#10;        val result = repository.getTrendingMovies(page)&#10;&#10;        // Then&#10;        assertEquals(listOf(testMovie), result)&#10;        coVerify { tmdbService.getTrending(page) }&#10;    }&#10;&#10;    @Test&#10;    fun `searchMovies returns cached data when cache is valid`() = runTest {&#10;        // Given&#10;        val query = &quot;batman&quot;&#10;        val page = 1&#10;        val searchKey = &quot;${query}_$page&quot;&#10;        val cachedEntity = SearchCacheEntity(&#10;            searchKey = searchKey,&#10;            query = query,&#10;            page = page,&#10;            moviesJson = &quot;mock_json&quot;,&#10;            lastFetched = System.currentTimeMillis()&#10;        )&#10;        coEvery { dao.getSearchCache(searchKey) } returns cachedEntity&#10;        every { com.example.movielist.util.CacheValidator.isValid(any()) } returns true&#10;&#10;        // When&#10;        val result = repository.searchMovies(query, page)&#10;&#10;        // Then&#10;        assertEquals(listOf(testMovie), result)&#10;        verify { jsonMapper.fromMoviesJson(&quot;mock_json&quot;) }&#10;        coVerify(exactly = 0) { tmdbService.searchMovies(any(), any()) }&#10;    }&#10;&#10;    @Test&#10;    fun `getMovieDetail returns cached data when available`() = runTest {&#10;        // Given&#10;        val movieId = 1&#10;        val cachedEntity = MovieDetailEntity(&#10;            id = movieId,&#10;            json = &quot;mock_detail_json&quot;,&#10;            lastFetched = System.currentTimeMillis()&#10;        )&#10;        coEvery { dao.getMovieDetail(movieId) } returns cachedEntity&#10;&#10;        // When&#10;        val result = repository.getMovieDetail(movieId)&#10;&#10;        // Then&#10;        assertEquals(testMovieDetail, result)&#10;        verify { jsonMapper.fromMovieDetailJson(&quot;mock_detail_json&quot;) }&#10;        coVerify(exactly = 0) { tmdbService.getMovieDetails(any()) }&#10;    }&#10;&#10;    @Test&#10;    fun `getMovieDetail fetches from network when no cache exists`() = runTest {&#10;        // Given&#10;        val movieId = 1&#10;        coEvery { dao.getMovieDetail(movieId) } returns null&#10;        coEvery { tmdbService.getMovieDetails(movieId) } returns testMovieDetailDto&#10;        coEvery { dao.insertMovieDetail(any()) } returns Unit&#10;&#10;        // When&#10;        val result = repository.getMovieDetail(movieId)&#10;&#10;        // Then&#10;        assertEquals(testMovieDetail, result)&#10;        coVerify { tmdbService.getMovieDetails(movieId) }&#10;        coVerify { dao.insertMovieDetail(any()) }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;}" />
              <option name="updatedContent" value="// Top-level build file where you can add configuration options common to all sub-projects/modules.&#10;plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.compose) apply false&#10;    alias(libs.plugins.hilt) apply false&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.12.0&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;kotlinCompilerExtension = &quot;1.5.8&quot;&#10;coreKtx = &quot;1.10.1&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.1.5&quot;&#10;espressoCore = &quot;3.5.1&quot;&#10;appcompat = &quot;1.6.1&quot;&#10;material = &quot;1.10.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.7.0&quot;&#10;activityCompose = &quot;1.8.2&quot;&#10;composeBom = &quot;2024.02.00&quot;&#10;navigationCompose = &quot;2.7.6&quot;&#10;lifecycleViewmodelCompose = &quot;2.7.0&quot;&#10;hilt = &quot;2.48&quot;&#10;hiltNavigationCompose = &quot;1.1.0&quot;&#10;retrofit = &quot;2.9.0&quot;&#10;okhttp = &quot;4.12.0&quot;&#10;moshi = &quot;1.15.0&quot;&#10;room = &quot;2.6.1&quot;&#10;coil = &quot;2.5.0&quot;&#10;coroutinesTest = &quot;1.7.3&quot;&#10;turbine = &quot;1.0.0&quot;&#10;hiltTesting = &quot;2.48&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycleViewmodelCompose&quot; }&#10;hilt-android = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-android&quot;, version.ref = &quot;hilt&quot; }&#10;hilt-compiler = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-compiler&quot;, version.ref = &quot;hilt&quot; }&#10;hilt-navigation-compose = { group = &quot;androidx.hilt&quot;, name = &quot;hilt-navigation-compose&quot;, version.ref = &quot;hiltNavigationCompose&quot; }&#10;retrofit = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;retrofit-converter-moshi = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;converter-moshi&quot;, version.ref = &quot;retrofit&quot; }&#10;okhttp = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;okhttp&quot;, version.ref = &quot;okhttp&quot; }&#10;okhttp-logging = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;logging-interceptor&quot;, version.ref = &quot;okhttp&quot; }&#10;moshi-kotlin = { group = &quot;com.squareup.moshi&quot;, name = &quot;moshi-kotlin&quot;, version.ref = &quot;moshi&quot; }&#10;room-runtime = { group = &quot;androidx.room&quot;, name = &quot;room-runtime&quot;, version.ref = &quot;room&quot; }&#10;room-compiler = { group = &quot;androidx.room&quot;, name = &quot;room-compiler&quot;, version.ref = &quot;room&quot; }&#10;room-ktx = { group = &quot;androidx.room&quot;, name = &quot;room-ktx&quot;, version.ref = &quot;room&quot; }&#10;coil-compose = { group = &quot;io.coil-kt&quot;, name = &quot;coil-compose&quot;, version.ref = &quot;coil&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;kotlinx-coroutines-test = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-test&quot;, version.ref = &quot;coroutinesTest&quot; }&#10;turbine = { group = &quot;app.cash.turbine&quot;, name = &quot;turbine&quot;, version.ref = &quot;turbine&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;hilt-android-testing = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-android-testing&quot;, version.ref = &quot;hiltTesting&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;hilt = { id = &quot;com.google.dagger.hilt.android&quot;, version.ref = &quot;hilt&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.12.0&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;kotlinCompilerExtension = &quot;1.5.8&quot;&#10;coreKtx = &quot;1.10.1&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.1.5&quot;&#10;espressoCore = &quot;3.5.1&quot;&#10;appcompat = &quot;1.6.1&quot;&#10;material = &quot;1.10.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.7.0&quot;&#10;activityCompose = &quot;1.8.2&quot;&#10;composeBom = &quot;2024.02.00&quot;&#10;navigationCompose = &quot;2.7.6&quot;&#10;lifecycleViewmodelCompose = &quot;2.7.0&quot;&#10;hilt = &quot;2.48&quot;&#10;hiltNavigationCompose = &quot;1.1.0&quot;&#10;retrofit = &quot;2.9.0&quot;&#10;okhttp = &quot;4.12.0&quot;&#10;moshi = &quot;1.15.0&quot;&#10;room = &quot;2.6.1&quot;&#10;coil = &quot;2.5.0&quot;&#10;coroutinesTest = &quot;1.7.3&quot;&#10;turbine = &quot;1.0.0&quot;&#10;hiltTesting = &quot;2.48&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-navigation-compose = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose&quot;, version.ref = &quot;navigationCompose&quot; }&#10;androidx-lifecycle-viewmodel-compose = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-viewmodel-compose&quot;, version.ref = &quot;lifecycleViewmodelCompose&quot; }&#10;hilt-android = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-android&quot;, version.ref = &quot;hilt&quot; }&#10;hilt-compiler = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-compiler&quot;, version.ref = &quot;hilt&quot; }&#10;hilt-navigation-compose = { group = &quot;androidx.hilt&quot;, name = &quot;hilt-navigation-compose&quot;, version.ref = &quot;hiltNavigationCompose&quot; }&#10;retrofit = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;retrofit-converter-moshi = { group = &quot;com.squareup.retrofit2&quot;, name = &quot;converter-moshi&quot;, version.ref = &quot;retrofit&quot; }&#10;okhttp = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;okhttp&quot;, version.ref = &quot;okhttp&quot; }&#10;okhttp-logging = { group = &quot;com.squareup.okhttp3&quot;, name = &quot;logging-interceptor&quot;, version.ref = &quot;okhttp&quot; }&#10;moshi-kotlin = { group = &quot;com.squareup.moshi&quot;, name = &quot;moshi-kotlin&quot;, version.ref = &quot;moshi&quot; }&#10;moshi-kotlin-codegen = { group = &quot;com.squareup.moshi&quot;, name = &quot;moshi-kotlin-codegen&quot;, version.ref = &quot;moshi&quot; }&#10;room-runtime = { group = &quot;androidx.room&quot;, name = &quot;room-runtime&quot;, version.ref = &quot;room&quot; }&#10;room-compiler = { group = &quot;androidx.room&quot;, name = &quot;room-compiler&quot;, version.ref = &quot;room&quot; }&#10;room-ktx = { group = &quot;androidx.room&quot;, name = &quot;room-ktx&quot;, version.ref = &quot;room&quot; }&#10;coil-compose = { group = &quot;io.coil-kt&quot;, name = &quot;coil-compose&quot;, version.ref = &quot;coil&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;kotlinx-coroutines-test = { group = &quot;org.jetbrains.kotlinx&quot;, name = &quot;kotlinx-coroutines-test&quot;, version.ref = &quot;coroutinesTest&quot; }&#10;turbine = { group = &quot;app.cash.turbine&quot;, name = &quot;turbine&quot;, version.ref = &quot;turbine&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;hilt-android-testing = { group = &quot;com.google.dagger&quot;, name = &quot;hilt-android-testing&quot;, version.ref = &quot;hiltTesting&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;hilt = { id = &quot;com.google.dagger.hilt.android&quot;, version.ref = &quot;hilt&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>